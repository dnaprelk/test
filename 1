import subprocess
import configparser
import requests
import json
import time
import paho.mqtt.client as mqtt
import os, signal
import socket
import signal
import psutil
import sys
import threading
import logging
import traceback
from datetime import datetime
from tabulate import tabulate

logging.basicConfig(
   level=logging.DEBUG,
   format='%(asctime)s - [%(name)s] - [%(levelname)s] - %(message)s'
)
log = logging.getLogger("MAIN")
logWatcher = logging.getLogger("WATCHER")
logMQTT = logging.getLogger("MQTT")
logMQTT.setLevel(logging.ERROR)

dictPeer2Cpe = {}
dictCpe2Peer = {}

interface_names = ['wg0', 'wg1']

def get_wireguard_peers(interface_name):
    try:
        result = subprocess.run(['wg', 'show', interface_name], capture_output=True, text=True, check=True)
        listTextPeers = result.stdout.split("\n\n")
        listPeers = []
        for sPeerText in listTextPeers:
           lines = sPeerText.split("\n")
           peer = None
           endpoint = None
           allowed_ips = None

           for line in lines:
              if line.startswith("peer: "):
                 peer = line.split("peer: ")[1].strip()
              elif line.startswith("  endpoint: "):
                 endpoint = line.split("  endpoint: ")[1].strip()
              elif line.startswith("  allowed ips: "):
                 allowed_ips = line.split("  allowed ips: ")[1].strip()
                 if allowed_ips == "(none)":
                    allowed_ips = None

           if peer is not None:
              listPeers.append({"peer":peer, "endpoint":endpoint, "ip":allowed_ips})

        return listPeers

    except subprocess.CalledProcessError as e:
        log.error(f"Error: {e}")
        return []

def watcher():
   for interface_name in interface_names:
       listPeers = get_wireguard_peers(interface_name)

       arrRows = []
       for peer in listPeers:
          arrRow = []
          arrRows.append(arrRow)
          arrRow.append(peer["peer"])
          arrRow.append(peer["endpoint"])
          arrRow.append(peer["ip"])
          arrRow.append(dictPeer2Cpe[peer["peer"]] if peer["peer"] in dictPeer2Cpe else "---")

          if peer["ip"] is None:
             arrRow.append("*REMOVE*")
             os.system(f"wg set {interface_name} peer {peer['peer']} remove")
          else:
             arrRow.append("KEEP")

       logWatcher.info(f"\n\nPEERs for {interface_name}:\n" + tabulate(arrRows, headers=["Key", "Endpoint", "IP", "CPE", "Action"], tablefmt="grid"))

   threading.Timer(1, watcher).start()

threading.Timer(1, watcher).start()

def signal_handler(signum, frame):
    log.info('\nTerminating...')
    client.disconnect()
    for interface_name in interface_names:
        os.system(f'wg-quick down /root/{interface_name}.conf')
        os.system(f'firewall-cmd --zone=public --remove-port {interface_name.replace("wg", "5182")}/udp')
        os.system(f'firewall-cmd --zone=trusted --remove-interface={interface_name}')
        os.system(f'ip link del dev {interface_name}')
    log.info('...done!')
    quit()

class Hub():
    prikey = ''
    pubkey = ''
    local_wg_port = ''
    machineid = ''
    master_pubkey = ''
    master_host = ''
    master_ip = ''
    master_wg_port = ''
    state = 'offline'
    fail_ping_count = 0
    tenant = ''

    def __init__(self):
        config = configparser.ConfigParser()
        config.read('../etc/master.conf')
        self.master_host = config['Master']['Host']
        self.tenant = config['Master']['Tenant']
        self.prikey = subprocess.check_output(["wg", "genkey"]).rstrip().decode("utf-8")
        cmd = 'echo %s | wg pubkey' % (self.prikey)
        self.pubkey = subprocess.check_output(cmd, shell=True).rstrip().decode("utf-8")
        self.machineid = subprocess.check_output(["cat", "/etc/machine-id"]).rstrip().decode("utf-8")
        for interface_name in interface_names:
            os.system(f'ip link add dev {interface_name} type wireguard')
            os.system(f'firewall-cmd --zone=public --add-port {interface_name.replace("wg", "5182")}/udp')
            os.system(f'firewall-cmd --zone=trusted --add-interface={interface_name}')

    def register(self):
        msg = {
            'key': self.machineid,
            'pubkey': self.pubkey
        }

        url = 'https://%s/%s/register/hub' % (self.master_host, self.tenant)
        log.info(url)
        log.info(json.dumps(msg))

        try:
            response = requests.post(url, json=msg)
            data = response.json()
            log.info(data)
            h = list(data.keys())[0]

            self.id = data[h]['id']
            self.name = h
            self.master_pubkey = data[h]['master_pubkey']
            self.master_wg_port = data[h]['master_wg_port']
            self.local_wg_port = data[h]['local_wg_port']
            self.master_ip = socket.gethostbyname(self.master_host)
            log.info('IP: %s', self.master_ip)

            cmd = 'hostnamectl set-hostname %s.local' % (self.name)
            os.system(cmd)

            for interface_name in interface_names:
                result = '[Interface]\n'
                result += 'ListenPort = %s\n' % (self.local_wg_port)
                result += 'PrivateKey = %s\n' % (self.prikey)

                result += '[Peer]\n'
                result += 'PublicKey = %s\n' % (self.master_pubkey)
                result += 'AllowedIPs = 169.254.0.1\n'
                result += 'Endpoint = %s:%s\n' % (self.master_ip, self.master_wg_port)
                result += 'PersistentKeepalive = 10\n'

                wg_conf = open(f'{interface_name}.conf', 'w')
                wg_conf.write('%s' % result)
                wg_conf.close()

                os.system(f'wg setconf {interface_name} {interface_name}.conf')
                cmd = 'ip address replace 169.254.%d.254/16 dev %s' % (self.id, interface_name)
                os.system(cmd)
                os.system(f'ip link set up dev {interface_name}')

            self.state = 'registered'
            return True
        except:
            self.state = 'offline'
            return False

    def update_peers(self):
        for interface_name in interface_names:
            url = 'https://%s/api/v1.0/nodem/peers/%s' % (self.master_host, self.name)
            log.info('Update peers %s', self.name)

            result =  '[Peer]\n'
            result += 'PublicKey = %s\n' % (self.master_pubkey)
            result += 'AllowedIPs = 169.254.0.1\n'
            result += 'Endpoint = %s:%s\n' % (self.master_ip, self.master_wg_port)
            result += 'PersistentKeepalive = 10\n'
            result += '\n'

            try:
                response = requests.get(url)
                data = response.json()
                log.info(data)

                for d in data['peers']:
                    result += '[Peer]\n'
                    result += 'PublicKey = %s\n' % (d['pubkey'])
                    result += 'AllowedIPs = 169.254.%d.254\n' % (d['id'])
                    result += 'Endpoint = %s:51824\n' % (d['ip'])
                    result += 'PersistentKeepalive = 10\n'
                    result += '\n'

                wg_conf = open(f'{interface_name}.conf', 'w')
                wg_conf.write('%s' % result)
                wg_conf.close()

                os.system(f'wg addconf {interface_name} {interface_name}.conf')

                cmd = f'wg show {interface_name} allowed-ips\n'
                res = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE)

                for line in res.stdout:
                    arg = line.split('\t')
                    if arg[1].rstrip() == '(none)':
                        cmd = f'wg set {interface_name} peer %s remove' % (arg[0])
                        os.system(cmd)

            except:
                wg_conf = open(f'{interface_name}.conf', 'w')
                wg_conf.write('%s' % result)
                wg_conf.close()

                os.system(f'wg addconf {interface_name} {interface_name}.conf')

    def check_uplink(self):
        cmd = 'fping -C 1 -q 169.254.0.1 2>&1'
        p = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE)
        r = p.communicate()[0].decode("utf-8")
        data = r.rstrip().replace(' ', '').split(':')

        if data[1] == '-':
            hub.fail_ping_count = hub.fail_ping_count + 1

            if hub.fail_ping_count == 5:
                hub.state = 'offline'
        else:
            hub.fail_ping_count = 0
            net = psutil.net_io_counters(pernic=True)
            result = {
                hub.name: {
                    'status': 'online',
                    'delay': float(data[1]),
                    'cpu': psutil.cpu_percent(),
                    'mem': psutil.virtual_memory()[2],
                    'disk': psutil.disk_usage('/')[3],
                    'uplink_tx': net['wg0'][0],
                    'uplink_rx': net['wg0'][1]
                }
            }
            topic = 'hub/' + hub.name + '/ping'
            client.publish(topic, json.dumps(result), 0)

hub = Hub()

def on_connect(client, userdata, flags, rc):
    log.info('Connected with result code %s', rc)
    client.subscribe('confm/#')
    client.subscribe('nodem/#')
    client.subscribe('admin/#')
    client.subscribe(hub.name + '/#')
    hub.state = 'online'
    result = '{ \"' + hub.name + '\": { \"status\": \"online\" } }'
    client.publish('hub/update', result, 0)

def on_disconnect(client, userdata, rc):
    log.info('Broker failure')
    hub.state = 'offline'

def on_message(client, userdata, msg):
    try:
       topic = msg.topic.split('/')
       m = json.loads(msg.payload)
       log.info('MQTT: ' + msg.topic + ' ' + json.dumps(m, indent=4, sort_keys=True))

       if topic[0] == 'confm':
           if topic[1] == 'update':
               if topic[2] == 'node':
                   uuid = m["uuid"]
                   dictData = m["message"]

                   n = list(dictData.keys())[0]
                   obj = dictData[n]

                   if obj['state'] == 'disabled' or obj['status'] == "offline":
                       if n in dictCpe2Peer:
                           os.system(f"wg set {interface_name} peer {dictCpe2Peer[n]} remove")
                           del dictPeer2Cpe[dictCpe2Peer[n]]
                           del dictCpe2Peer[n]

                   if obj['status'] == 'registered':
                       log.info('Update peer %s', dictData)

                       dictCpe2Peer[n] = dictData[n]['pubkey']
                       dictPeer2Cpe[dictData[n]['pubkey']] = n

                       for interface_name in interface_names:
                           result =  '[Peer]\n'
                           result += 'PublicKey = %s\n' % (dictData[n]['pubkey'])
                           result += 'AllowedIPs = 169.254.%d.%d\n' % (hub.id, dictData[n]['id'])
                           result += 'PersistentKeepalive = 10\n'

                           log.info(result)

                           wg_conf = open('peer.conf', 'w')
                           wg_conf.write('%s' % result)
                           wg_conf.close()

                           os.system(f'wg addconf {interface_name} peer.conf')

       if topic[0] == 'admin':
           if topic[1] == 'reset':
               if topic[2] == 'system':
                   log.info("Let's stop process.")
                   sig = getattr(signal, "SIGKILL", signal.SIGTERM)
                   os.kill(os.getpid(), sig)
           if topic[1] == 'reboot':
               if topic[2] == 'hub':
                   if m["name"] == hub.name:
                      log.info("Let's reboot hub.")
                      os.system("reboot")
    except Exception as e:
       log.error(f"{e} {type(e)}\n" + "\n".join(traceback.format_tb(e.__traceback__)))

client = mqtt.Client(hub.machineid)

log.info('Master: %s', hub.master_ip)

signal.signal(signal.SIGINT, signal_handler)

while True:
    if hub.state == 'offline':
        if client:
            client.disconnect()
            del client
            client = mqtt.Client(hub.machineid)
            client.on_connect = on_connect
            client.on_disconnect = on_disconnect
            client.on_message = on_message

        log.info('Registering hub')
        if hub.register() == True:
            log.info('Hub registered successfully')
        else:
            log.info('Hub registration fail')
            time.sleep(1)

    if hub.state == 'registered':
        reg_time = time.time()
 while time.time() < (reg_time + 30):
            log.info('Setting up message broker connection')

            try:
                client.connect('169.254.0.1')
                client.loop_start()
                hub.state = 'connected'
                reg_time = 0
                log.info('Hub connected to the message broker')
                time.sleep(1)
            except:
                log.error('Unable to connect to the message broker')
                time.sleep(1)

    if hub.state == 'connected':
        log.info('Waiting for message from node manager')
        conn_time = time.time()

        while time.time() < (conn_time + 30):
            if hub.state != 'online':
                time.sleep(1)

    if hub.state == 'online':
        hub.check_uplink()
        time.sleep(1)

    log.info('Current hub state: %s', hub.state)
